// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Class is an object representing the database table.
type Class struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Code      string    `boil:"code" json:"code" toml:"code" yaml:"code"`
	Unit      int64     `boil:"unit" json:"unit" toml:"unit" yaml:"unit"`
	Semester  string    `boil:"semester" json:"semester" toml:"semester" yaml:"semester"`
	Location  string    `boil:"location" json:"location" toml:"location" yaml:"location"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *classR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L classL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClassColumns = struct {
	ID        string
	Title     string
	Code      string
	Unit      string
	Semester  string
	Location  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Title:     "title",
	Code:      "code",
	Unit:      "unit",
	Semester:  "semester",
	Location:  "location",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var ClassTableColumns = struct {
	ID        string
	Title     string
	Code      string
	Unit      string
	Semester  string
	Location  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "classes.id",
	Title:     "classes.title",
	Code:      "classes.code",
	Unit:      "classes.unit",
	Semester:  "classes.semester",
	Location:  "classes.location",
	CreatedAt: "classes.created_at",
	UpdatedAt: "classes.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ClassWhere = struct {
	ID        whereHelperstring
	Title     whereHelperstring
	Code      whereHelperstring
	Unit      whereHelperint64
	Semester  whereHelperstring
	Location  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"classes\".\"id\""},
	Title:     whereHelperstring{field: "\"classes\".\"title\""},
	Code:      whereHelperstring{field: "\"classes\".\"code\""},
	Unit:      whereHelperint64{field: "\"classes\".\"unit\""},
	Semester:  whereHelperstring{field: "\"classes\".\"semester\""},
	Location:  whereHelperstring{field: "\"classes\".\"location\""},
	CreatedAt: whereHelpertime_Time{field: "\"classes\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"classes\".\"updated_at\""},
}

// ClassRels is where relationship names are stored.
var ClassRels = struct {
	InstructorStaffs string
	Students         string
}{
	InstructorStaffs: "InstructorStaffs",
	Students:         "Students",
}

// classR is where relationships are stored.
type classR struct {
	InstructorStaffs StaffSlice   `boil:"InstructorStaffs" json:"InstructorStaffs" toml:"InstructorStaffs" yaml:"InstructorStaffs"`
	Students         StudentSlice `boil:"Students" json:"Students" toml:"Students" yaml:"Students"`
}

// NewStruct creates a new relationship struct
func (*classR) NewStruct() *classR {
	return &classR{}
}

// classL is where Load methods for each relationship are stored.
type classL struct{}

var (
	classAllColumns            = []string{"id", "title", "code", "unit", "semester", "location", "created_at", "updated_at"}
	classColumnsWithoutDefault = []string{"id", "title", "code", "unit", "semester", "location", "created_at", "updated_at"}
	classColumnsWithDefault    = []string{}
	classPrimaryKeyColumns     = []string{"id"}
	classGeneratedColumns      = []string{}
)

type (
	// ClassSlice is an alias for a slice of pointers to Class.
	// This should almost always be used instead of []Class.
	ClassSlice []*Class
	// ClassHook is the signature for custom Class hook methods
	ClassHook func(context.Context, boil.ContextExecutor, *Class) error

	classQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	classType                 = reflect.TypeOf(&Class{})
	classMapping              = queries.MakeStructMapping(classType)
	classPrimaryKeyMapping, _ = queries.BindMapping(classType, classMapping, classPrimaryKeyColumns)
	classInsertCacheMut       sync.RWMutex
	classInsertCache          = make(map[string]insertCache)
	classUpdateCacheMut       sync.RWMutex
	classUpdateCache          = make(map[string]updateCache)
	classUpsertCacheMut       sync.RWMutex
	classUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var classAfterSelectHooks []ClassHook

var classBeforeInsertHooks []ClassHook
var classAfterInsertHooks []ClassHook

var classBeforeUpdateHooks []ClassHook
var classAfterUpdateHooks []ClassHook

var classBeforeDeleteHooks []ClassHook
var classAfterDeleteHooks []ClassHook

var classBeforeUpsertHooks []ClassHook
var classAfterUpsertHooks []ClassHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Class) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Class) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Class) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Class) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Class) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Class) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Class) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Class) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Class) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClassHook registers your hook function for all future operations.
func AddClassHook(hookPoint boil.HookPoint, classHook ClassHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		classAfterSelectHooks = append(classAfterSelectHooks, classHook)
	case boil.BeforeInsertHook:
		classBeforeInsertHooks = append(classBeforeInsertHooks, classHook)
	case boil.AfterInsertHook:
		classAfterInsertHooks = append(classAfterInsertHooks, classHook)
	case boil.BeforeUpdateHook:
		classBeforeUpdateHooks = append(classBeforeUpdateHooks, classHook)
	case boil.AfterUpdateHook:
		classAfterUpdateHooks = append(classAfterUpdateHooks, classHook)
	case boil.BeforeDeleteHook:
		classBeforeDeleteHooks = append(classBeforeDeleteHooks, classHook)
	case boil.AfterDeleteHook:
		classAfterDeleteHooks = append(classAfterDeleteHooks, classHook)
	case boil.BeforeUpsertHook:
		classBeforeUpsertHooks = append(classBeforeUpsertHooks, classHook)
	case boil.AfterUpsertHook:
		classAfterUpsertHooks = append(classAfterUpsertHooks, classHook)
	}
}

// One returns a single class record from the query.
func (q classQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Class, error) {
	o := &Class{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for classes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Class records from the query.
func (q classQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClassSlice, error) {
	var o []*Class

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Class slice")
	}

	if len(classAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Class records in the query.
func (q classQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count classes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q classQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if classes exists")
	}

	return count > 0, nil
}

// InstructorStaffs retrieves all the staff's Staffs with an executor via id column.
func (o *Class) InstructorStaffs(mods ...qm.QueryMod) staffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"class_instructor\" on \"staffs\".\"id\" = \"class_instructor\".\"instructor_id\""),
		qm.Where("\"class_instructor\".\"class_id\"=?", o.ID),
	)

	query := Staffs(queryMods...)
	queries.SetFrom(query.Query, "\"staffs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"staffs\".*"})
	}

	return query
}

// Students retrieves all the student's Students with an executor.
func (o *Class) Students(mods ...qm.QueryMod) studentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"class_student\" on \"students\".\"id\" = \"class_student\".\"student_id\""),
		qm.Where("\"class_student\".\"class_id\"=?", o.ID),
	)

	query := Students(queryMods...)
	queries.SetFrom(query.Query, "\"students\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"students\".*"})
	}

	return query
}

// LoadInstructorStaffs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (classL) LoadInstructorStaffs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClass interface{}, mods queries.Applicator) error {
	var slice []*Class
	var object *Class

	if singular {
		object = maybeClass.(*Class)
	} else {
		slice = *maybeClass.(*[]*Class)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &classR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &classR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"staffs\".id, \"staffs\".firstname, \"staffs\".lastname, \"staffs\".email, \"staffs\".telephone, \"staffs\".salary, \"staffs\".role, \"staffs\".rank, \"staffs\".created_at, \"staffs\".updated_at, \"staffs\".department_staffs, \"staffs\".department_id, \"a\".\"class_id\""),
		qm.From("\"staffs\""),
		qm.InnerJoin("\"class_instructor\" as \"a\" on \"staffs\".\"id\" = \"a\".\"instructor_id\""),
		qm.WhereIn("\"a\".\"class_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staffs")
	}

	var resultSlice []*Staff

	var localJoinCols []string
	for results.Next() {
		one := new(Staff)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Firstname, &one.Lastname, &one.Email, &one.Telephone, &one.Salary, &one.Role, &one.Rank, &one.CreatedAt, &one.UpdatedAt, &one.DepartmentStaffs, &one.DepartmentID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for staffs")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice staffs")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InstructorStaffs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &staffR{}
			}
			foreign.R.Classes = append(foreign.R.Classes, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.InstructorStaffs = append(local.R.InstructorStaffs, foreign)
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.Classes = append(foreign.R.Classes, local)
				break
			}
		}
	}

	return nil
}

// LoadStudents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (classL) LoadStudents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClass interface{}, mods queries.Applicator) error {
	var slice []*Class
	var object *Class

	if singular {
		object = maybeClass.(*Class)
	} else {
		slice = *maybeClass.(*[]*Class)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &classR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &classR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"students\".id, \"students\".firstname, \"students\".lastname, \"students\".email, \"students\".admission_number, \"students\".cgpa, \"students\".year, \"students\".created_at, \"students\".updated_at, \"students\".department_id, \"a\".\"class_id\""),
		qm.From("\"students\""),
		qm.InnerJoin("\"class_student\" as \"a\" on \"students\".\"id\" = \"a\".\"student_id\""),
		qm.WhereIn("\"a\".\"class_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load students")
	}

	var resultSlice []*Student

	var localJoinCols []string
	for results.Next() {
		one := new(Student)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Firstname, &one.Lastname, &one.Email, &one.AdmissionNumber, &one.Cgpa, &one.Year, &one.CreatedAt, &one.UpdatedAt, &one.DepartmentID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for students")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice students")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on students")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for students")
	}

	if len(studentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Students = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &studentR{}
			}
			foreign.R.Classes = append(foreign.R.Classes, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Students = append(local.R.Students, foreign)
				if foreign.R == nil {
					foreign.R = &studentR{}
				}
				foreign.R.Classes = append(foreign.R.Classes, local)
				break
			}
		}
	}

	return nil
}

// AddInstructorStaffs adds the given related objects to the existing relationships
// of the class, optionally inserting them as new records.
// Appends related to o.R.InstructorStaffs.
// Sets related.R.Classes appropriately.
func (o *Class) AddInstructorStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"class_instructor\" (\"class_id\", \"instructor_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &classR{
			InstructorStaffs: related,
		}
	} else {
		o.R.InstructorStaffs = append(o.R.InstructorStaffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staffR{
				Classes: ClassSlice{o},
			}
		} else {
			rel.R.Classes = append(rel.R.Classes, o)
		}
	}
	return nil
}

// SetInstructorStaffs removes all previously related items of the
// class replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Classes's InstructorStaffs accordingly.
// Replaces o.R.InstructorStaffs with related.
// Sets related.R.Classes's InstructorStaffs accordingly.
func (o *Class) SetInstructorStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) error {
	query := "delete from \"class_instructor\" where \"class_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeInstructorStaffsFromClassesSlice(o, related)
	if o.R != nil {
		o.R.InstructorStaffs = nil
	}
	return o.AddInstructorStaffs(ctx, exec, insert, related...)
}

// RemoveInstructorStaffs relationships from objects passed in.
// Removes related items from R.InstructorStaffs (uses pointer comparison, removal does not keep order)
// Sets related.R.Classes.
func (o *Class) RemoveInstructorStaffs(ctx context.Context, exec boil.ContextExecutor, related ...*Staff) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"class_instructor\" where \"class_id\" = $1 and \"instructor_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeInstructorStaffsFromClassesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InstructorStaffs {
			if rel != ri {
				continue
			}

			ln := len(o.R.InstructorStaffs)
			if ln > 1 && i < ln-1 {
				o.R.InstructorStaffs[i] = o.R.InstructorStaffs[ln-1]
			}
			o.R.InstructorStaffs = o.R.InstructorStaffs[:ln-1]
			break
		}
	}

	return nil
}

func removeInstructorStaffsFromClassesSlice(o *Class, related []*Staff) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Classes {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Classes)
			if ln > 1 && i < ln-1 {
				rel.R.Classes[i] = rel.R.Classes[ln-1]
			}
			rel.R.Classes = rel.R.Classes[:ln-1]
			break
		}
	}
}

// AddStudents adds the given related objects to the existing relationships
// of the class, optionally inserting them as new records.
// Appends related to o.R.Students.
// Sets related.R.Classes appropriately.
func (o *Class) AddStudents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Student) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"class_student\" (\"class_id\", \"student_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &classR{
			Students: related,
		}
	} else {
		o.R.Students = append(o.R.Students, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &studentR{
				Classes: ClassSlice{o},
			}
		} else {
			rel.R.Classes = append(rel.R.Classes, o)
		}
	}
	return nil
}

// SetStudents removes all previously related items of the
// class replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Classes's Students accordingly.
// Replaces o.R.Students with related.
// Sets related.R.Classes's Students accordingly.
func (o *Class) SetStudents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Student) error {
	query := "delete from \"class_student\" where \"class_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeStudentsFromClassesSlice(o, related)
	if o.R != nil {
		o.R.Students = nil
	}
	return o.AddStudents(ctx, exec, insert, related...)
}

// RemoveStudents relationships from objects passed in.
// Removes related items from R.Students (uses pointer comparison, removal does not keep order)
// Sets related.R.Classes.
func (o *Class) RemoveStudents(ctx context.Context, exec boil.ContextExecutor, related ...*Student) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"class_student\" where \"class_id\" = $1 and \"student_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeStudentsFromClassesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Students {
			if rel != ri {
				continue
			}

			ln := len(o.R.Students)
			if ln > 1 && i < ln-1 {
				o.R.Students[i] = o.R.Students[ln-1]
			}
			o.R.Students = o.R.Students[:ln-1]
			break
		}
	}

	return nil
}

func removeStudentsFromClassesSlice(o *Class, related []*Student) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Classes {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Classes)
			if ln > 1 && i < ln-1 {
				rel.R.Classes[i] = rel.R.Classes[ln-1]
			}
			rel.R.Classes = rel.R.Classes[:ln-1]
			break
		}
	}
}

// Classes retrieves all the records using an executor.
func Classes(mods ...qm.QueryMod) classQuery {
	mods = append(mods, qm.From("\"classes\""))
	return classQuery{NewQuery(mods...)}
}

// FindClass retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClass(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Class, error) {
	classObj := &Class{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"classes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, classObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from classes")
	}

	if err = classObj.doAfterSelectHooks(ctx, exec); err != nil {
		return classObj, err
	}

	return classObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Class) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no classes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(classColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	classInsertCacheMut.RLock()
	cache, cached := classInsertCache[key]
	classInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			classAllColumns,
			classColumnsWithDefault,
			classColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(classType, classMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(classType, classMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"classes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"classes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into classes")
	}

	if !cached {
		classInsertCacheMut.Lock()
		classInsertCache[key] = cache
		classInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Class.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Class) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	classUpdateCacheMut.RLock()
	cache, cached := classUpdateCache[key]
	classUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			classAllColumns,
			classPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update classes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"classes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, classPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(classType, classMapping, append(wl, classPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update classes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for classes")
	}

	if !cached {
		classUpdateCacheMut.Lock()
		classUpdateCache[key] = cache
		classUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q classQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for classes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for classes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClassSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), classPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"classes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, classPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in class slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all class")
	}
	return rowsAff, nil
}

// Delete deletes a single Class record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Class) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Class provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), classPrimaryKeyMapping)
	sql := "DELETE FROM \"classes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from classes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for classes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q classQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no classQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from classes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for classes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClassSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(classBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), classPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"classes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, classPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from class slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for classes")
	}

	if len(classAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Class) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClass(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClassSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClassSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), classPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"classes\".* FROM \"classes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, classPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClassSlice")
	}

	*o = slice

	return nil
}

// ClassExists checks if the Class row exists.
func ClassExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"classes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if classes exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Class) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no classes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(classColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	classUpsertCacheMut.RLock()
	cache, cached := classUpsertCache[key]
	classUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			classAllColumns,
			classColumnsWithDefault,
			classColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			classAllColumns,
			classPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert classes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(classPrimaryKeyColumns))
			copy(conflict, classPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"classes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(classType, classMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(classType, classMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert classes")
	}

	if !cached {
		classUpsertCacheMut.Lock()
		classUpsertCache[key] = cache
		classUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
