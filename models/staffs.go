// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Staff is an object representing the database table.
type Staff struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Firstname        string      `boil:"firstname" json:"firstname" toml:"firstname" yaml:"firstname"`
	Lastname         string      `boil:"lastname" json:"lastname" toml:"lastname" yaml:"lastname"`
	Email            string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Telephone        string      `boil:"telephone" json:"telephone" toml:"telephone" yaml:"telephone"`
	Salary           int64       `boil:"salary" json:"salary" toml:"salary" yaml:"salary"`
	Role             string      `boil:"role" json:"role" toml:"role" yaml:"role"`
	Rank             string      `boil:"rank" json:"rank" toml:"rank" yaml:"rank"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DepartmentStaffs null.String `boil:"department_staffs" json:"department_staffs,omitempty" toml:"department_staffs" yaml:"department_staffs,omitempty"`
	DepartmentID     null.String `boil:"department_id" json:"department_id,omitempty" toml:"department_id" yaml:"department_id,omitempty"`

	R *staffR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L staffL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaffColumns = struct {
	ID               string
	Firstname        string
	Lastname         string
	Email            string
	Telephone        string
	Salary           string
	Role             string
	Rank             string
	CreatedAt        string
	UpdatedAt        string
	DepartmentStaffs string
	DepartmentID     string
}{
	ID:               "id",
	Firstname:        "firstname",
	Lastname:         "lastname",
	Email:            "email",
	Telephone:        "telephone",
	Salary:           "salary",
	Role:             "role",
	Rank:             "rank",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DepartmentStaffs: "department_staffs",
	DepartmentID:     "department_id",
}

var StaffTableColumns = struct {
	ID               string
	Firstname        string
	Lastname         string
	Email            string
	Telephone        string
	Salary           string
	Role             string
	Rank             string
	CreatedAt        string
	UpdatedAt        string
	DepartmentStaffs string
	DepartmentID     string
}{
	ID:               "staffs.id",
	Firstname:        "staffs.firstname",
	Lastname:         "staffs.lastname",
	Email:            "staffs.email",
	Telephone:        "staffs.telephone",
	Salary:           "staffs.salary",
	Role:             "staffs.role",
	Rank:             "staffs.rank",
	CreatedAt:        "staffs.created_at",
	UpdatedAt:        "staffs.updated_at",
	DepartmentStaffs: "staffs.department_staffs",
	DepartmentID:     "staffs.department_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var StaffWhere = struct {
	ID               whereHelperstring
	Firstname        whereHelperstring
	Lastname         whereHelperstring
	Email            whereHelperstring
	Telephone        whereHelperstring
	Salary           whereHelperint64
	Role             whereHelperstring
	Rank             whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DepartmentStaffs whereHelpernull_String
	DepartmentID     whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"staffs\".\"id\""},
	Firstname:        whereHelperstring{field: "\"staffs\".\"firstname\""},
	Lastname:         whereHelperstring{field: "\"staffs\".\"lastname\""},
	Email:            whereHelperstring{field: "\"staffs\".\"email\""},
	Telephone:        whereHelperstring{field: "\"staffs\".\"telephone\""},
	Salary:           whereHelperint64{field: "\"staffs\".\"salary\""},
	Role:             whereHelperstring{field: "\"staffs\".\"role\""},
	Rank:             whereHelperstring{field: "\"staffs\".\"rank\""},
	CreatedAt:        whereHelpertime_Time{field: "\"staffs\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"staffs\".\"updated_at\""},
	DepartmentStaffs: whereHelpernull_String{field: "\"staffs\".\"department_staffs\""},
	DepartmentID:     whereHelpernull_String{field: "\"staffs\".\"department_id\""},
}

// StaffRels is where relationship names are stored.
var StaffRels = struct {
	DepartmentStaff string
	Classes         string
}{
	DepartmentStaff: "DepartmentStaff",
	Classes:         "Classes",
}

// staffR is where relationships are stored.
type staffR struct {
	DepartmentStaff *Department `boil:"DepartmentStaff" json:"DepartmentStaff" toml:"DepartmentStaff" yaml:"DepartmentStaff"`
	Classes         ClassSlice  `boil:"Classes" json:"Classes" toml:"Classes" yaml:"Classes"`
}

// NewStruct creates a new relationship struct
func (*staffR) NewStruct() *staffR {
	return &staffR{}
}

// staffL is where Load methods for each relationship are stored.
type staffL struct{}

var (
	staffAllColumns            = []string{"id", "firstname", "lastname", "email", "telephone", "salary", "role", "rank", "created_at", "updated_at", "department_staffs", "department_id"}
	staffColumnsWithoutDefault = []string{"id", "firstname", "lastname", "email", "telephone", "salary", "role", "rank", "created_at", "updated_at", "department_staffs", "department_id"}
	staffColumnsWithDefault    = []string{}
	staffPrimaryKeyColumns     = []string{"id"}
	staffGeneratedColumns      = []string{}
)

type (
	// StaffSlice is an alias for a slice of pointers to Staff.
	// This should almost always be used instead of []Staff.
	StaffSlice []*Staff
	// StaffHook is the signature for custom Staff hook methods
	StaffHook func(context.Context, boil.ContextExecutor, *Staff) error

	staffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staffType                 = reflect.TypeOf(&Staff{})
	staffMapping              = queries.MakeStructMapping(staffType)
	staffPrimaryKeyMapping, _ = queries.BindMapping(staffType, staffMapping, staffPrimaryKeyColumns)
	staffInsertCacheMut       sync.RWMutex
	staffInsertCache          = make(map[string]insertCache)
	staffUpdateCacheMut       sync.RWMutex
	staffUpdateCache          = make(map[string]updateCache)
	staffUpsertCacheMut       sync.RWMutex
	staffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var staffAfterSelectHooks []StaffHook

var staffBeforeInsertHooks []StaffHook
var staffAfterInsertHooks []StaffHook

var staffBeforeUpdateHooks []StaffHook
var staffAfterUpdateHooks []StaffHook

var staffBeforeDeleteHooks []StaffHook
var staffAfterDeleteHooks []StaffHook

var staffBeforeUpsertHooks []StaffHook
var staffAfterUpsertHooks []StaffHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Staff) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Staff) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Staff) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Staff) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Staff) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Staff) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Staff) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Staff) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Staff) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStaffHook registers your hook function for all future operations.
func AddStaffHook(hookPoint boil.HookPoint, staffHook StaffHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		staffAfterSelectHooks = append(staffAfterSelectHooks, staffHook)
	case boil.BeforeInsertHook:
		staffBeforeInsertHooks = append(staffBeforeInsertHooks, staffHook)
	case boil.AfterInsertHook:
		staffAfterInsertHooks = append(staffAfterInsertHooks, staffHook)
	case boil.BeforeUpdateHook:
		staffBeforeUpdateHooks = append(staffBeforeUpdateHooks, staffHook)
	case boil.AfterUpdateHook:
		staffAfterUpdateHooks = append(staffAfterUpdateHooks, staffHook)
	case boil.BeforeDeleteHook:
		staffBeforeDeleteHooks = append(staffBeforeDeleteHooks, staffHook)
	case boil.AfterDeleteHook:
		staffAfterDeleteHooks = append(staffAfterDeleteHooks, staffHook)
	case boil.BeforeUpsertHook:
		staffBeforeUpsertHooks = append(staffBeforeUpsertHooks, staffHook)
	case boil.AfterUpsertHook:
		staffAfterUpsertHooks = append(staffAfterUpsertHooks, staffHook)
	}
}

// One returns a single staff record from the query.
func (q staffQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Staff, error) {
	o := &Staff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for staffs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Staff records from the query.
func (q staffQuery) All(ctx context.Context, exec boil.ContextExecutor) (StaffSlice, error) {
	var o []*Staff

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Staff slice")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Staff records in the query.
func (q staffQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count staffs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q staffQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if staffs exists")
	}

	return count > 0, nil
}

// DepartmentStaff pointed to by the foreign key.
func (o *Staff) DepartmentStaff(mods ...qm.QueryMod) departmentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DepartmentStaffs),
	}

	queryMods = append(queryMods, mods...)

	query := Departments(queryMods...)
	queries.SetFrom(query.Query, "\"departments\"")

	return query
}

// Classes retrieves all the class's Classes with an executor.
func (o *Staff) Classes(mods ...qm.QueryMod) classQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"class_instructor\" on \"classes\".\"id\" = \"class_instructor\".\"class_id\""),
		qm.Where("\"class_instructor\".\"instructor_id\"=?", o.ID),
	)

	query := Classes(queryMods...)
	queries.SetFrom(query.Query, "\"classes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"classes\".*"})
	}

	return query
}

// LoadDepartmentStaff allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staffL) LoadDepartmentStaff(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		if !queries.IsNil(object.DepartmentStaffs) {
			args = append(args, object.DepartmentStaffs)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DepartmentStaffs) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DepartmentStaffs) {
				args = append(args, obj.DepartmentStaffs)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`departments`),
		qm.WhereIn(`departments.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Department")
	}

	var resultSlice []*Department
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Department")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for departments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for departments")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DepartmentStaff = foreign
		if foreign.R == nil {
			foreign.R = &departmentR{}
		}
		foreign.R.DepartmentStaffStaffs = append(foreign.R.DepartmentStaffStaffs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DepartmentStaffs, foreign.ID) {
				local.R.DepartmentStaff = foreign
				if foreign.R == nil {
					foreign.R = &departmentR{}
				}
				foreign.R.DepartmentStaffStaffs = append(foreign.R.DepartmentStaffStaffs, local)
				break
			}
		}
	}

	return nil
}

// LoadClasses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadClasses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"classes\".id, \"classes\".title, \"classes\".code, \"classes\".unit, \"classes\".semester, \"classes\".location, \"classes\".created_at, \"classes\".updated_at, \"a\".\"instructor_id\""),
		qm.From("\"classes\""),
		qm.InnerJoin("\"class_instructor\" as \"a\" on \"classes\".\"id\" = \"a\".\"class_id\""),
		qm.WhereIn("\"a\".\"instructor_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load classes")
	}

	var resultSlice []*Class

	var localJoinCols []string
	for results.Next() {
		one := new(Class)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Title, &one.Code, &one.Unit, &one.Semester, &one.Location, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for classes")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice classes")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on classes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for classes")
	}

	if len(classAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Classes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &classR{}
			}
			foreign.R.InstructorStaffs = append(foreign.R.InstructorStaffs, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Classes = append(local.R.Classes, foreign)
				if foreign.R == nil {
					foreign.R = &classR{}
				}
				foreign.R.InstructorStaffs = append(foreign.R.InstructorStaffs, local)
				break
			}
		}
	}

	return nil
}

// SetDepartmentStaff of the staff to the related item.
// Sets o.R.DepartmentStaff to related.
// Adds o to related.R.DepartmentStaffStaffs.
func (o *Staff) SetDepartmentStaff(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Department) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"staffs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"department_staffs"}),
		strmangle.WhereClause("\"", "\"", 2, staffPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DepartmentStaffs, related.ID)
	if o.R == nil {
		o.R = &staffR{
			DepartmentStaff: related,
		}
	} else {
		o.R.DepartmentStaff = related
	}

	if related.R == nil {
		related.R = &departmentR{
			DepartmentStaffStaffs: StaffSlice{o},
		}
	} else {
		related.R.DepartmentStaffStaffs = append(related.R.DepartmentStaffStaffs, o)
	}

	return nil
}

// RemoveDepartmentStaff relationship.
// Sets o.R.DepartmentStaff to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Staff) RemoveDepartmentStaff(ctx context.Context, exec boil.ContextExecutor, related *Department) error {
	var err error

	queries.SetScanner(&o.DepartmentStaffs, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("department_staffs")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DepartmentStaff = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DepartmentStaffStaffs {
		if queries.Equal(o.DepartmentStaffs, ri.DepartmentStaffs) {
			continue
		}

		ln := len(related.R.DepartmentStaffStaffs)
		if ln > 1 && i < ln-1 {
			related.R.DepartmentStaffStaffs[i] = related.R.DepartmentStaffStaffs[ln-1]
		}
		related.R.DepartmentStaffStaffs = related.R.DepartmentStaffStaffs[:ln-1]
		break
	}
	return nil
}

// AddClasses adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Classes.
// Sets related.R.InstructorStaffs appropriately.
func (o *Staff) AddClasses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Class) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"class_instructor\" (\"instructor_id\", \"class_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &staffR{
			Classes: related,
		}
	} else {
		o.R.Classes = append(o.R.Classes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &classR{
				InstructorStaffs: StaffSlice{o},
			}
		} else {
			rel.R.InstructorStaffs = append(rel.R.InstructorStaffs, o)
		}
	}
	return nil
}

// SetClasses removes all previously related items of the
// staff replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InstructorStaffs's Classes accordingly.
// Replaces o.R.Classes with related.
// Sets related.R.InstructorStaffs's Classes accordingly.
func (o *Staff) SetClasses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Class) error {
	query := "delete from \"class_instructor\" where \"instructor_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeClassesFromInstructorStaffsSlice(o, related)
	if o.R != nil {
		o.R.Classes = nil
	}
	return o.AddClasses(ctx, exec, insert, related...)
}

// RemoveClasses relationships from objects passed in.
// Removes related items from R.Classes (uses pointer comparison, removal does not keep order)
// Sets related.R.InstructorStaffs.
func (o *Staff) RemoveClasses(ctx context.Context, exec boil.ContextExecutor, related ...*Class) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"class_instructor\" where \"instructor_id\" = $1 and \"class_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeClassesFromInstructorStaffsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Classes {
			if rel != ri {
				continue
			}

			ln := len(o.R.Classes)
			if ln > 1 && i < ln-1 {
				o.R.Classes[i] = o.R.Classes[ln-1]
			}
			o.R.Classes = o.R.Classes[:ln-1]
			break
		}
	}

	return nil
}

func removeClassesFromInstructorStaffsSlice(o *Staff, related []*Class) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.InstructorStaffs {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.InstructorStaffs)
			if ln > 1 && i < ln-1 {
				rel.R.InstructorStaffs[i] = rel.R.InstructorStaffs[ln-1]
			}
			rel.R.InstructorStaffs = rel.R.InstructorStaffs[:ln-1]
			break
		}
	}
}

// Staffs retrieves all the records using an executor.
func Staffs(mods ...qm.QueryMod) staffQuery {
	mods = append(mods, qm.From("\"staffs\""))
	return staffQuery{NewQuery(mods...)}
}

// FindStaff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaff(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Staff, error) {
	staffObj := &Staff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"staffs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, staffObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from staffs")
	}

	if err = staffObj.doAfterSelectHooks(ctx, exec); err != nil {
		return staffObj, err
	}

	return staffObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Staff) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no staffs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staffInsertCacheMut.RLock()
	cache, cached := staffInsertCache[key]
	staffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staffType, staffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"staffs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"staffs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into staffs")
	}

	if !cached {
		staffInsertCacheMut.Lock()
		staffInsertCache[key] = cache
		staffInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Staff.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Staff) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	staffUpdateCacheMut.RLock()
	cache, cached := staffUpdateCache[key]
	staffUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update staffs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"staffs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, staffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, append(wl, staffPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update staffs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for staffs")
	}

	if !cached {
		staffUpdateCacheMut.Lock()
		staffUpdateCache[key] = cache
		staffUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q staffQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for staffs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaffSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"staffs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, staffPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all staff")
	}
	return rowsAff, nil
}

// Delete deletes a single Staff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Staff) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Staff provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staffPrimaryKeyMapping)
	sql := "DELETE FROM \"staffs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for staffs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q staffQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no staffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for staffs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaffSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(staffBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"staffs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staffPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for staffs")
	}

	if len(staffAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Staff) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStaff(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"staffs\".* FROM \"staffs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staffPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StaffSlice")
	}

	*o = slice

	return nil
}

// StaffExists checks if the Staff row exists.
func StaffExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"staffs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if staffs exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Staff) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no staffs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staffUpsertCacheMut.RLock()
	cache, cached := staffUpsertCache[key]
	staffUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert staffs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(staffPrimaryKeyColumns))
			copy(conflict, staffPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"staffs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staffType, staffMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert staffs")
	}

	if !cached {
		staffUpsertCacheMut.Lock()
		staffUpsertCache[key] = cache
		staffUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
