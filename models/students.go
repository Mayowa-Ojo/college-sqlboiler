// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Student is an object representing the database table.
type Student struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Firstname       string      `boil:"firstname" json:"firstname" toml:"firstname" yaml:"firstname"`
	Lastname        string      `boil:"lastname" json:"lastname" toml:"lastname" yaml:"lastname"`
	Email           string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	AdmissionNumber string      `boil:"admission_number" json:"admission_number" toml:"admission_number" yaml:"admission_number"`
	Cgpa            float32     `boil:"cgpa" json:"cgpa" toml:"cgpa" yaml:"cgpa"`
	Year            int64       `boil:"year" json:"year" toml:"year" yaml:"year"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DepartmentID    null.String `boil:"department_id" json:"department_id,omitempty" toml:"department_id" yaml:"department_id,omitempty"`

	R *studentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L studentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StudentColumns = struct {
	ID              string
	Firstname       string
	Lastname        string
	Email           string
	AdmissionNumber string
	Cgpa            string
	Year            string
	CreatedAt       string
	UpdatedAt       string
	DepartmentID    string
}{
	ID:              "id",
	Firstname:       "firstname",
	Lastname:        "lastname",
	Email:           "email",
	AdmissionNumber: "admission_number",
	Cgpa:            "cgpa",
	Year:            "year",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DepartmentID:    "department_id",
}

var StudentTableColumns = struct {
	ID              string
	Firstname       string
	Lastname        string
	Email           string
	AdmissionNumber string
	Cgpa            string
	Year            string
	CreatedAt       string
	UpdatedAt       string
	DepartmentID    string
}{
	ID:              "students.id",
	Firstname:       "students.firstname",
	Lastname:        "students.lastname",
	Email:           "students.email",
	AdmissionNumber: "students.admission_number",
	Cgpa:            "students.cgpa",
	Year:            "students.year",
	CreatedAt:       "students.created_at",
	UpdatedAt:       "students.updated_at",
	DepartmentID:    "students.department_id",
}

// Generated where

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var StudentWhere = struct {
	ID              whereHelperstring
	Firstname       whereHelperstring
	Lastname        whereHelperstring
	Email           whereHelperstring
	AdmissionNumber whereHelperstring
	Cgpa            whereHelperfloat32
	Year            whereHelperint64
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	DepartmentID    whereHelpernull_String
}{
	ID:              whereHelperstring{field: "\"students\".\"id\""},
	Firstname:       whereHelperstring{field: "\"students\".\"firstname\""},
	Lastname:        whereHelperstring{field: "\"students\".\"lastname\""},
	Email:           whereHelperstring{field: "\"students\".\"email\""},
	AdmissionNumber: whereHelperstring{field: "\"students\".\"admission_number\""},
	Cgpa:            whereHelperfloat32{field: "\"students\".\"cgpa\""},
	Year:            whereHelperint64{field: "\"students\".\"year\""},
	CreatedAt:       whereHelpertime_Time{field: "\"students\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"students\".\"updated_at\""},
	DepartmentID:    whereHelpernull_String{field: "\"students\".\"department_id\""},
}

// StudentRels is where relationship names are stored.
var StudentRels = struct {
	Department string
	Classes    string
}{
	Department: "Department",
	Classes:    "Classes",
}

// studentR is where relationships are stored.
type studentR struct {
	Department *Department `boil:"Department" json:"Department" toml:"Department" yaml:"Department"`
	Classes    ClassSlice  `boil:"Classes" json:"Classes" toml:"Classes" yaml:"Classes"`
}

// NewStruct creates a new relationship struct
func (*studentR) NewStruct() *studentR {
	return &studentR{}
}

// studentL is where Load methods for each relationship are stored.
type studentL struct{}

var (
	studentAllColumns            = []string{"id", "firstname", "lastname", "email", "admission_number", "cgpa", "year", "created_at", "updated_at", "department_id"}
	studentColumnsWithoutDefault = []string{"id", "firstname", "lastname", "email", "admission_number", "year", "created_at", "updated_at", "department_id"}
	studentColumnsWithDefault    = []string{"cgpa"}
	studentPrimaryKeyColumns     = []string{"id"}
	studentGeneratedColumns      = []string{}
)

type (
	// StudentSlice is an alias for a slice of pointers to Student.
	// This should almost always be used instead of []Student.
	StudentSlice []*Student
	// StudentHook is the signature for custom Student hook methods
	StudentHook func(context.Context, boil.ContextExecutor, *Student) error

	studentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	studentType                 = reflect.TypeOf(&Student{})
	studentMapping              = queries.MakeStructMapping(studentType)
	studentPrimaryKeyMapping, _ = queries.BindMapping(studentType, studentMapping, studentPrimaryKeyColumns)
	studentInsertCacheMut       sync.RWMutex
	studentInsertCache          = make(map[string]insertCache)
	studentUpdateCacheMut       sync.RWMutex
	studentUpdateCache          = make(map[string]updateCache)
	studentUpsertCacheMut       sync.RWMutex
	studentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var studentAfterSelectHooks []StudentHook

var studentBeforeInsertHooks []StudentHook
var studentAfterInsertHooks []StudentHook

var studentBeforeUpdateHooks []StudentHook
var studentAfterUpdateHooks []StudentHook

var studentBeforeDeleteHooks []StudentHook
var studentAfterDeleteHooks []StudentHook

var studentBeforeUpsertHooks []StudentHook
var studentAfterUpsertHooks []StudentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Student) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Student) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Student) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Student) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Student) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Student) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Student) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Student) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Student) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStudentHook registers your hook function for all future operations.
func AddStudentHook(hookPoint boil.HookPoint, studentHook StudentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		studentAfterSelectHooks = append(studentAfterSelectHooks, studentHook)
	case boil.BeforeInsertHook:
		studentBeforeInsertHooks = append(studentBeforeInsertHooks, studentHook)
	case boil.AfterInsertHook:
		studentAfterInsertHooks = append(studentAfterInsertHooks, studentHook)
	case boil.BeforeUpdateHook:
		studentBeforeUpdateHooks = append(studentBeforeUpdateHooks, studentHook)
	case boil.AfterUpdateHook:
		studentAfterUpdateHooks = append(studentAfterUpdateHooks, studentHook)
	case boil.BeforeDeleteHook:
		studentBeforeDeleteHooks = append(studentBeforeDeleteHooks, studentHook)
	case boil.AfterDeleteHook:
		studentAfterDeleteHooks = append(studentAfterDeleteHooks, studentHook)
	case boil.BeforeUpsertHook:
		studentBeforeUpsertHooks = append(studentBeforeUpsertHooks, studentHook)
	case boil.AfterUpsertHook:
		studentAfterUpsertHooks = append(studentAfterUpsertHooks, studentHook)
	}
}

// One returns a single student record from the query.
func (q studentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Student, error) {
	o := &Student{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for students")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Student records from the query.
func (q studentQuery) All(ctx context.Context, exec boil.ContextExecutor) (StudentSlice, error) {
	var o []*Student

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Student slice")
	}

	if len(studentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Student records in the query.
func (q studentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count students rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q studentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if students exists")
	}

	return count > 0, nil
}

// Department pointed to by the foreign key.
func (o *Student) Department(mods ...qm.QueryMod) departmentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DepartmentID),
	}

	queryMods = append(queryMods, mods...)

	query := Departments(queryMods...)
	queries.SetFrom(query.Query, "\"departments\"")

	return query
}

// Classes retrieves all the class's Classes with an executor.
func (o *Student) Classes(mods ...qm.QueryMod) classQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"class_student\" on \"classes\".\"id\" = \"class_student\".\"class_id\""),
		qm.Where("\"class_student\".\"student_id\"=?", o.ID),
	)

	query := Classes(queryMods...)
	queries.SetFrom(query.Query, "\"classes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"classes\".*"})
	}

	return query
}

// LoadDepartment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (studentL) LoadDepartment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudent interface{}, mods queries.Applicator) error {
	var slice []*Student
	var object *Student

	if singular {
		object = maybeStudent.(*Student)
	} else {
		slice = *maybeStudent.(*[]*Student)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &studentR{}
		}
		if !queries.IsNil(object.DepartmentID) {
			args = append(args, object.DepartmentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DepartmentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DepartmentID) {
				args = append(args, obj.DepartmentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`departments`),
		qm.WhereIn(`departments.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Department")
	}

	var resultSlice []*Department
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Department")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for departments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for departments")
	}

	if len(studentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Department = foreign
		if foreign.R == nil {
			foreign.R = &departmentR{}
		}
		foreign.R.Students = append(foreign.R.Students, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DepartmentID, foreign.ID) {
				local.R.Department = foreign
				if foreign.R == nil {
					foreign.R = &departmentR{}
				}
				foreign.R.Students = append(foreign.R.Students, local)
				break
			}
		}
	}

	return nil
}

// LoadClasses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (studentL) LoadClasses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudent interface{}, mods queries.Applicator) error {
	var slice []*Student
	var object *Student

	if singular {
		object = maybeStudent.(*Student)
	} else {
		slice = *maybeStudent.(*[]*Student)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &studentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studentR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"classes\".id, \"classes\".title, \"classes\".code, \"classes\".unit, \"classes\".semester, \"classes\".location, \"classes\".created_at, \"classes\".updated_at, \"a\".\"student_id\""),
		qm.From("\"classes\""),
		qm.InnerJoin("\"class_student\" as \"a\" on \"classes\".\"id\" = \"a\".\"class_id\""),
		qm.WhereIn("\"a\".\"student_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load classes")
	}

	var resultSlice []*Class

	var localJoinCols []string
	for results.Next() {
		one := new(Class)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Title, &one.Code, &one.Unit, &one.Semester, &one.Location, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for classes")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice classes")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on classes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for classes")
	}

	if len(classAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Classes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &classR{}
			}
			foreign.R.Students = append(foreign.R.Students, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Classes = append(local.R.Classes, foreign)
				if foreign.R == nil {
					foreign.R = &classR{}
				}
				foreign.R.Students = append(foreign.R.Students, local)
				break
			}
		}
	}

	return nil
}

// SetDepartment of the student to the related item.
// Sets o.R.Department to related.
// Adds o to related.R.Students.
func (o *Student) SetDepartment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Department) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"students\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"department_id"}),
		strmangle.WhereClause("\"", "\"", 2, studentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DepartmentID, related.ID)
	if o.R == nil {
		o.R = &studentR{
			Department: related,
		}
	} else {
		o.R.Department = related
	}

	if related.R == nil {
		related.R = &departmentR{
			Students: StudentSlice{o},
		}
	} else {
		related.R.Students = append(related.R.Students, o)
	}

	return nil
}

// RemoveDepartment relationship.
// Sets o.R.Department to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Student) RemoveDepartment(ctx context.Context, exec boil.ContextExecutor, related *Department) error {
	var err error

	queries.SetScanner(&o.DepartmentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("department_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Department = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Students {
		if queries.Equal(o.DepartmentID, ri.DepartmentID) {
			continue
		}

		ln := len(related.R.Students)
		if ln > 1 && i < ln-1 {
			related.R.Students[i] = related.R.Students[ln-1]
		}
		related.R.Students = related.R.Students[:ln-1]
		break
	}
	return nil
}

// AddClasses adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Classes.
// Sets related.R.Students appropriately.
func (o *Student) AddClasses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Class) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"class_student\" (\"student_id\", \"class_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &studentR{
			Classes: related,
		}
	} else {
		o.R.Classes = append(o.R.Classes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &classR{
				Students: StudentSlice{o},
			}
		} else {
			rel.R.Students = append(rel.R.Students, o)
		}
	}
	return nil
}

// SetClasses removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Students's Classes accordingly.
// Replaces o.R.Classes with related.
// Sets related.R.Students's Classes accordingly.
func (o *Student) SetClasses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Class) error {
	query := "delete from \"class_student\" where \"student_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeClassesFromStudentsSlice(o, related)
	if o.R != nil {
		o.R.Classes = nil
	}
	return o.AddClasses(ctx, exec, insert, related...)
}

// RemoveClasses relationships from objects passed in.
// Removes related items from R.Classes (uses pointer comparison, removal does not keep order)
// Sets related.R.Students.
func (o *Student) RemoveClasses(ctx context.Context, exec boil.ContextExecutor, related ...*Class) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"class_student\" where \"student_id\" = $1 and \"class_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeClassesFromStudentsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Classes {
			if rel != ri {
				continue
			}

			ln := len(o.R.Classes)
			if ln > 1 && i < ln-1 {
				o.R.Classes[i] = o.R.Classes[ln-1]
			}
			o.R.Classes = o.R.Classes[:ln-1]
			break
		}
	}

	return nil
}

func removeClassesFromStudentsSlice(o *Student, related []*Class) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Students {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Students)
			if ln > 1 && i < ln-1 {
				rel.R.Students[i] = rel.R.Students[ln-1]
			}
			rel.R.Students = rel.R.Students[:ln-1]
			break
		}
	}
}

// Students retrieves all the records using an executor.
func Students(mods ...qm.QueryMod) studentQuery {
	mods = append(mods, qm.From("\"students\""))
	return studentQuery{NewQuery(mods...)}
}

// FindStudent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStudent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Student, error) {
	studentObj := &Student{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"students\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, studentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from students")
	}

	if err = studentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return studentObj, err
	}

	return studentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Student) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no students provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	studentInsertCacheMut.RLock()
	cache, cached := studentInsertCache[key]
	studentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			studentAllColumns,
			studentColumnsWithDefault,
			studentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(studentType, studentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(studentType, studentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"students\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"students\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into students")
	}

	if !cached {
		studentInsertCacheMut.Lock()
		studentInsertCache[key] = cache
		studentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Student.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Student) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	studentUpdateCacheMut.RLock()
	cache, cached := studentUpdateCache[key]
	studentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			studentAllColumns,
			studentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update students, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"students\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, studentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(studentType, studentMapping, append(wl, studentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update students row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for students")
	}

	if !cached {
		studentUpdateCacheMut.Lock()
		studentUpdateCache[key] = cache
		studentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q studentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for students")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for students")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StudentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"students\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, studentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in student slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all student")
	}
	return rowsAff, nil
}

// Delete deletes a single Student record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Student) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Student provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), studentPrimaryKeyMapping)
	sql := "DELETE FROM \"students\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from students")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for students")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q studentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no studentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from students")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for students")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StudentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(studentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"students\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from student slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for students")
	}

	if len(studentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Student) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStudent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StudentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StudentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"students\".* FROM \"students\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StudentSlice")
	}

	*o = slice

	return nil
}

// StudentExists checks if the Student row exists.
func StudentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"students\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if students exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Student) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no students provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	studentUpsertCacheMut.RLock()
	cache, cached := studentUpsertCache[key]
	studentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			studentAllColumns,
			studentColumnsWithDefault,
			studentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			studentAllColumns,
			studentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert students, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(studentPrimaryKeyColumns))
			copy(conflict, studentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"students\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(studentType, studentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(studentType, studentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert students")
	}

	if !cached {
		studentUpsertCacheMut.Lock()
		studentUpsertCache[key] = cache
		studentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
